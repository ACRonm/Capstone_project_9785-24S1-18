@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using AddressCorrectionTool.Models
@using System.Text
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components


@page "/metrics/"

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<link rel="stylesheet" href="/css/general.css">


<div class="container">
    <h2 class="text-center mt-4">Address Correction Dashboard</h2>
    <p class="text-center">Here you can view the metrics related to address correction.</p>

    <div class="row mt-5 d-flex align-items-stretch">
        <div class="col-lg-6">
            <div class="card h-100">
                <div class="card-body bg-body-tertiary">
                    <h5 class="card-title text-center">Metrics Chart</h5>
                    @if (isLoaded)
                    {
                        <canvas id="metrics-chart"></canvas>

                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center" style="height: 100%;">
                            <div class="spinner-border text-secondary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    <div class="row mt-5">
                        <div class="col-lg-12">
                            <div class="d-flex justify-content-center">
                                <button class="btn btn-danger" @onclick="ResetMetrics">Reset Metrics</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card h-100 mt-3 mt-lg-0">
                <div class="card-body bg-body-tertiary">
                    <h5 class="card-title text-center">Processing Time</h5>

                    <h5 class="card-title text-center"></h5>
                    <canvas id="timeseriesMetricsChart"></canvas>

                    <div class="row mt-5">
                        <div class="col-lg-6">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">Processing Time</h5>
                                    <p class="card-text">@if (meanProcessingTime > 0)
                                        {
                                        <p>
                                            Mean: @meanProcessingTime milliseconds
                                        </p>
                                        <p>
                                            Maximum: @timeSeriesList.Max(x => x.ProcessingTime) milliseconds
                                        </p>
                                        <p>
                                            Minimum: @timeSeriesList.Min(x => x.ProcessingTime) milliseconds
                                        </p>
                                        }
                                        else
                                        {
                                        <p>
                                            No data available
                                        </p>
                                        }

                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title"></h5>
                                    <p class="card-text">
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body bg-body-tertiary">
                    <h5 class="card-title
                        text-center">Address Correction Metrics</h5>
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">Total Addresses</th>
                                <th scope="col">Corrected Addresses</th>
                                <th scope="col">Failed Addresses</th>
                                <th scope="col">Miscorrected Addresses</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>@metricsArray[0]</td>
                                <td>@metricsArray[1]</td>
                                <td>@metricsArray[2]</td>
                                <td>@metricsArray[3]</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5 mb-5">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body bg-body-tertiary">
                    <h5 class="card-title
                        text-center">Miscorrected Addresses</h5>
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">Original Address</th>
                                <th scope="col">Original Suburb</th>
                                <th scope="col">Miscorrected Address</th>
                                <th scope="col">Miscorrected Suburb</th>

                            </tr>
                        </thead>
                        <tbody>


                            @if (correctedAddressList != null)
                            {
                                @foreach (var address in correctedAddressList)
                                {
                                    if (address.Result != 1)
                                    {
                                        <tr>

                                            <td>PEER STREET</td>
                                            <td>WEST BATHUSRT
                                                @address.Postcode</td>
                                            <td>@address.Street</td>
                                            <td>@address.City
                                                @address.Postcode
                                            </td>

                                        </tr>

                                    }
                                }
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    @* danger button to reset metrics *@


</div>

<script src="/javascript/charts.js"></script>

@code
{
    private DateTime startDate;
    private DateTime endDate;
    private bool isLoaded;
    private string? baseUrl;
    private string? apiKey;
    private int[] metricsArray = new int[4];
    List<TimeSeries>? timeSeriesList;
    private double meanProcessingTime;
    List<InputAddress>? correctedAddressList = new List<InputAddress>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            baseUrl = Configuration["ApiUrl"];
            apiKey = Configuration["ApiKey"];

            Http.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);


            Metrics metrics = await Http.GetFromJsonAsync<Metrics>(baseUrl + "/Metrics") ?? new Metrics();
            Console.WriteLine(metrics.TotalAddresses);
            timeSeriesList = await Http.GetFromJsonAsync<List<TimeSeries>>(baseUrl + "/InputAddresses");
            if (timeSeriesList != null && timeSeriesList.Any())
            {
                meanProcessingTime = timeSeriesList?.Average(x => x.ProcessingTime ?? 0) ?? 0;

                meanProcessingTime = Math.Round(meanProcessingTime);
            }
            if (metrics != null)
            {
                Array.Copy(new[] { metrics.TotalAddresses, metrics.CorrectedAddresses, metrics.FailedAddresses,
metrics.MiscorrectedAddresses }, metricsArray, 4);
            }

            correctedAddressList = await Http.GetFromJsonAsync<List<InputAddress>>(baseUrl + "/InputAddresses/CorrectedAddresses");


            isLoaded = true;
            StateHasChanged();
        }
        else if (metricsArray != null)
        {
            await CreateMetricsChart();
        }
        if (timeSeriesList != null && timeSeriesList.Any())
        {
            await CreateTimeSeriesChart(timeSeriesList);
        }
    }

    async Task CreateMetricsChart()
    {
        await JSRuntime.InvokeVoidAsync("createMetricsChart", metricsArray);
    }

    async Task CreateTimeSeriesChart(List<TimeSeries> timeSeriesList)
    {
        await JSRuntime.InvokeVoidAsync("createTimeSeriesChart", timeSeriesList);
    }

    async Task ResetMetrics()
    {
        //send API request to update metrics to 0 for each value
        Metrics metrics = new Metrics
            {
                TotalAddresses = 0,
                CorrectedAddresses = 0,
                FailedAddresses = 0,
                MiscorrectedAddresses = 0
            };

        meanProcessingTime = 0;

        var content = new StringContent(JsonSerializer.Serialize(metrics), Encoding.UTF8, "application/json");

        var response = await Http.PutAsync(baseUrl + "/Metrics", content);

        if (response.IsSuccessStatusCode)
        {
            metricsArray[0] = 0;
            metricsArray[1] = 0;
            metricsArray[2] = 0;
            metricsArray[3] = 0;

            // update the time series chart
            timeSeriesList = await Http.GetFromJsonAsync<List<TimeSeries>>(baseUrl + "/InputAddresses");

            await CreateMetricsChart();
            await CreateTimeSeriesChart(timeSeriesList);

        }
        else
        {
            Console.WriteLine("Failed to reset metrics");
        }
    }
    public class TimeSeries
    {
        [Key]
        public int Id { get; set; }
        public DateTime TimeStamp { get; set; }
        public long? ProcessingTime { get; set; }
    }
}
