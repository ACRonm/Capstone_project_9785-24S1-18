@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using AddressCorrectionTool.Models
@using System.Text
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components


@page "/metrics/"

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<link rel="stylesheet" href="/css/general.css">


<div class="container">
    <h2 class="text-center mt-4">Address Correction Dashboard</h2>
    <p class="text-center">Here you can view the metrics related to address correction.</p>

    <div class="row mt-5 d-flex align-items-stretch">
        <div class="col-lg-6">
            <div class="card h-100">
                <div class="card-body bg-body-tertiary">
                    <h5 class="card-title text-center">Metrics Chart</h5>
                    @if (isLoaded)
                    {
                        <canvas id="metrics-chart"></canvas>

                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center" style="height: 100%;">
                            <div class="spinner-border text-secondary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    <div class="row mt-5">
                        <div class="col-lg-12">
                            <div class="d-flex justify-content-center">
                                <button class="btn btn-danger" @onclick="ResetMetrics">Reset Metrics</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card h-100 mt-3 mt-lg-0">
                <div class="card-body bg-body-tertiary">
                    <h5 class="card-title text-center"></h5>
                    <canvas id=""></canvas>
                </div>
            </div>
        </div>
    </div>

    @* danger button to reset metrics *@


</div>

<script src="/javascript/charts.js"></script>

@code
{
    private bool isLoaded;
    private string? baseUrl;
    private string? apiKey;
    private int[] metricsArray = new int[3];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            baseUrl = Configuration["ApiUrl"];
            apiKey = Configuration["ApiKey"];

            Http.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);

            Metrics metrics = await Http.GetFromJsonAsync<Metrics>(baseUrl + "/Metrics") ?? new Metrics();


            if (metrics != null)
            {
                // add the values to the array
                metricsArray[0] = metrics.TotalAddresses;
                metricsArray[1] = metrics.CorrectedAddresses;
                metricsArray[2] = metrics.FailedAddresses;
            }
            isLoaded = true;
            StateHasChanged();
        }
        else if (metricsArray != null)
        {
            await CreateMetricsChart();
        }
    }

    async Task CreateMetricsChart()
    {
        await JSRuntime.InvokeVoidAsync("createMetricsChart", metricsArray);
    }

    async Task ResetMetrics()
    {
        //send API request to update metrics to 0 for each value
        Metrics metrics = new Metrics
            {
                TotalAddresses = 0,
                CorrectedAddresses = 0,
                FailedAddresses = 0
            };

        var content = new StringContent(JsonSerializer.Serialize(metrics), Encoding.UTF8, "application/json");

        var response = await Http.PutAsync(baseUrl + "/Metrics", content);

        if (response.IsSuccessStatusCode)
        {
            // refresh the page

            NavigationManager.NavigateTo("/metrics", true);
        }
        else
        {
            Console.WriteLine("Failed to reset metrics");
        }
    }

}
