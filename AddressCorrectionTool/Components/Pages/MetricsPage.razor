@using Microsoft.JSInterop
@using AddressCorrectionTool.Controllers
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using AddressCorrectionTool.Models
@using System.Text
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components


@page "/metrics/"

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<div class="container">
    <h2 class="text-center mt-4">Address Correction Dashboard</h2>
    <p class="text-center">Here you can view the metrics related to address correction.</p>

    <div class="row mt-5">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title text-center">Metrics Chart</h5>
                    @if (isLoaded)
                    {
                        <canvas id="metrics-chart"></canvas>
                    }
                    else
                    {
                        // display loading spinner
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    }



                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title text-center"></h5>
                    <canvas id=""></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/javascript/charts.js"></script>

@code
{
    private bool isLoaded = false;
    private string baseUrl = "https://localhost:7207";
    private int[] metricsArray = new int[3];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            Metrics metrics = await Http.GetFromJsonAsync<Metrics>(baseUrl + "/Metrics") ?? new Metrics();


            if (metrics != null)
            {
                // add the values to the array
                metricsArray[0] = metrics.TotalAddresses;
                metricsArray[1] = metrics.CorrectedAddresses;
                metricsArray[2] = metrics.FailedAddresses;
            }
            isLoaded = true;
            StateHasChanged();
        }
        else if (metricsArray != null)
        {
            await CreateMetricsChart();
        }
    }

    async Task CreateMetricsChart()
    {
        await JSRuntime.InvokeVoidAsync("createMetricsChart", metricsArray);
    }

}
