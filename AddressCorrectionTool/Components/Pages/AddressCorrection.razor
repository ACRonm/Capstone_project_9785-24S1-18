@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using AddressCorrectionTool.Models
@using System.Text
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using AddressCorrectionTool.Services


@rendermode InteractiveServer

@attribute [Authorize]

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ResponseService ResponseService
@inject ILogger<AddressCorrection> Logger
@inject IJSRuntime JSRuntime
@inject BatchCorrectionService BatchCorrectionService


@page "/address-correction"

<PageTitle>Address Correction</PageTitle>

<link rel="stylesheet" href="/css/general.css">
<link rel="stylesheet" href="/css/AddressCorrection.css">

<div class="row">
    <div class="col-md-6">
        <div class="card h-100">
            <div class="card-body bg-body-tertiary">
                <h3 class="card-title">Submit Address</h3>

                <section class="">


                    <EditForm Model="@addressToBeCorrected" FormName="addressForm" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="form-group col-xl-6 py-2">
                            <label for="Unit">Apartment/Flat/Unit Number</label>
                            <InputText id="Unit" class="form-control" @bind-Value="@addressToBeCorrected.Unit" />
                            <ValidationMessage For="@(() => addressToBeCorrected.Unit)" />
                        </div>

                        <div class="form-group col-xl-6 py-2">
                            <label for="Number">Street number</label>
                            <InputText id="Number" class="form-control" @bind-Value="@addressToBeCorrected.Number" />
                            <ValidationMessage For="@(() => addressToBeCorrected.Number)" />
                        </div>

                        <div class="form-group col-xl-6 py-2">
                            <label for="Street">Street name (examples: Graham Avenue, George Street)</label>
                            <InputText id="Street" class="form-control" @bind-Value="@addressToBeCorrected.Street" />
                            <ValidationMessage For="@(() => addressToBeCorrected.Street)" />
                        </div>



                        <div class="form-group col-xl-6 py-2">
                            <label for="City">Suburb/Locality</label>
                            <InputText id="City" class="form-control" @bind-Value="@addressToBeCorrected.City" />
                            <ValidationMessage For="@(() => addressToBeCorrected.City)" />
                        </div>

                        <div class="form-group col-xl-6 py-2">
                            <label for="Region">State/Territory</label>
                            <select id="Region" class="form-control" @bind="@addressToBeCorrected.Region">
                                <option value="NSW">NSW</option>
                                <option value="VIC">VIC</option>
                                <option value="QLD">QLD</option>
                                <option value="WA">WA</option>
                                <option value="SA">SA</option>
                                <option value="TAS">TAS</option>
                                <option value="ACT">ACT</option>
                                <option value="NT">NT</option>
                            </select>
                        </div>

                        <div class="form-group col-xl-6 py-2">
                            <label for="Postcode">Postcode</label>
                            <InputNumber id="Postcode" class="form-control"
                                @bind-Value="@addressToBeCorrected.Postcode" />
                            <ValidationMessage For="@(() => addressToBeCorrected.Postcode)" />
                        </div>

                        @if (!isLoading)
                        {
                            <button type="submit" class="btn btn-primary mt-3">Submit</button>
                        }
                        else
                        {
                            <button class="btn btn-primary mt-3" type="button" disabled>
                                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                                <span role="status">Loading...</span>
                            </button>
                        }
                    </EditForm>
                </section>
            </div>
        </div>
    </div>

    <div class="col-md-6 mt-3 mt-md-0 ">
        <div class="card h-100 bg-body-tertiary">
            <div class="card-body">
                <h3 class="card-title">Batch Upload</h3>
                <p class="col-xl-6 p-0">
                    Upload a CSV file containing addresses to be corrected. The file should contain the following
                    columns: id, number, street, unit, lon, lat, city, postcode, region, accuracy
                    <br>
                </p>
                @* download sample file *@
                <a href="/sample.csv" class="btn btn-success" download>Download
                    sample file</a>
                <EditForm Model="@addressToBeCorrected" OnValidSubmit="HandleBatchUpload" class="pt-3">
                    <div class="custom-file col-xl-6 border rounded-3 bg-light">
                        <InputFile id="csvFile" OnChange="HandleFileSelected" style="color:black" />
                    </div>
                    <div style="margin-top:1em">
                        <button type="submit" class="btn btn-primary" data-bs-toggle="modal"
                            data-bs-target="#myModal">Upload</button>
                    </div>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" style="margin-top:1em">@ErrorMessage</div>
                    }
                </EditForm>

                @* use bootstrap progress bar
                <div class="progress my-3" role="progressbar" aria-label="Example with label" aria-valuenow="25"
                aria-valuemin="0" aria-valuemax="100">
                <div class="progress-bar" style="width: 0%"></div>
                </div> *@
            </div>
        </div>
    </div>
</div>

<div class="modal" id="myModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Progress - Correcting Addresses</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="25"
                    aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar" style="width: 0%"></div>
                </div>
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
            </div>

        </div>
    </div>
</div>

<script src="/javascript/file_download.js"></script>

@code {
    private IBrowserFile? selectedFile;
    string placeHolder = "Choose file";
    string? ErrorMessage { get; set; }
    private InputAddress addressToBeCorrected = new Models.InputAddress();
    private bool isLoading = false;
    private string? baseUrl;
    private string? apiKey;


    private async Task HandleValidSubmit()
    {
        baseUrl = Configuration["ApiUrl"];
        apiKey = Configuration["ApiKey"];

        Console.WriteLine($"{baseUrl}/InputAddresses");

        isLoading = true;
        string json = JsonSerializer.Serialize(addressToBeCorrected);

        var content = new StringContent(json, Encoding.UTF8, "application/json");
        Http.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);
        var response = await Http.PostAsJsonAsync($"{baseUrl}/InputAddresses", addressToBeCorrected);

        isLoading = false;

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Console.WriteLine("Address corrected successfully");

            ResponseService.CorrectedAddress = await response.Content.ReadFromJsonAsync<InputAddress>();

            // print the corrected address
            if (ResponseService.CorrectedAddress == null)
            {
                Console.WriteLine("Error reading from json");
            }
            else if (ResponseService.CorrectedAddress.Result == 0)
                NavigationManager.NavigateTo("/failure");
            else
                NavigationManager.NavigateTo("/success");
        }
        else
        {
            Console.WriteLine(response.StatusCode);
            Console.WriteLine("Address correction failed");
            NavigationManager.NavigateTo("/failure");
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var fileInfo = new System.IO.FileInfo(e.File.Name);
        var fileExtension = fileInfo.Extension;

        if (e.File.Size > 512000)
        {
            ErrorMessage = "File size too large";
            placeHolder = "Choose file";
            return;
        }

        if (fileExtension != ".csv")
        {
            ErrorMessage = "Invalid file type. Please upload a CSV file.";
            placeHolder = "Choose file";
            return;
        }

        selectedFile = e.File;
        ErrorMessage = null;
        placeHolder = e.File.Name;
    }

    private async Task UpdateProgressBar(float progress)
    {
        progress *= 100;

        await JSRuntime.InvokeVoidAsync("updateProgressBar", progress);

    }

    private async Task HandleBatchUpload()
    {
        isLoading = true;
        Console.WriteLine("Checking file...");
        if (ErrorMessage != null || selectedFile == null)
        {
            if (selectedFile == null)
                ErrorMessage = "Please select a file to upload.";
            else if (ErrorMessage == null)
                ErrorMessage = "Invalid file type. Please upload a CSV file.";

            return;
        }

        var memoryStream = new MemoryStream();

        try
        {
            await selectedFile.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            using var reader = new StreamReader(memoryStream);
            var csv = new CsvHelper.CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture);

            List<Address> addressList = csv.GetRecords<Address>().ToList();

            await BatchCorrectionService.ProcessAddressesAsync(addressList, UpdateProgressBar);
        }
        catch (Exception e)
        {
            ErrorMessage = "File size too large";
            Console.WriteLine(e.Message);
        }


        isLoading = false;
    }
}
